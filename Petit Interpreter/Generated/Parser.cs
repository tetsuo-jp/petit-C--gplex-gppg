// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  11SE194-PC
// DateTime: 2013/08/23 12:16:45
// UserName: 11se194
// Input file <C:\ZerOx4C\Dropbox\classes\ƒ[ƒ~\petit\C#_gplex_gppg\Petit Interpreter\parser.y - 2013/08/17 14:25:16>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Petit
{
internal enum Tokens {
    error=1,EOF=2,ZERO=3,VAR=4,SUC=5,FOR=6,
    TIMES_DO=7,END=8,ASSIGN=9,SEMICOLON=10};

internal partial struct ValueType
{
	public ExpressionNode expression;
	public ProgramNode program;
	public VariableNode variable;
}
// Abstract base class for GPLEX scanners
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

internal partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from C:\ZerOx4C\Dropbox\classes\ƒ[ƒ~\petit\C#_gplex_gppg\Petit Interpreter\parser.y - 2013/08/17 14:25:16
  // End verbatim content from C:\ZerOx4C\Dropbox\classes\ƒ[ƒ~\petit\C#_gplex_gppg\Petit Interpreter\parser.y - 2013/08/17 14:25:16

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[9];
  private static State[] states = new State[18];
  private static string[] nonTerms = new string[] {
      "expression", "program", "input", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{6,6,4,11},new int[]{-3,1,-2,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{10,4,2,-2});
    states[4] = new State(new int[]{6,6,4,11},new int[]{-2,5});
    states[5] = new State(-3);
    states[6] = new State(new int[]{3,14,4,15,5,16},new int[]{-1,7});
    states[7] = new State(new int[]{7,8});
    states[8] = new State(new int[]{6,6,4,11},new int[]{-2,9});
    states[9] = new State(new int[]{8,10,10,4});
    states[10] = new State(-4);
    states[11] = new State(new int[]{9,12});
    states[12] = new State(new int[]{3,14,4,15,5,16},new int[]{-1,13});
    states[13] = new State(-5);
    states[14] = new State(-6);
    states[15] = new State(-7);
    states[16] = new State(new int[]{3,14,4,15,5,16},new int[]{-1,17});
    states[17] = new State(-8);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-4, new int[]{-3,2});
    rules[2] = new Rule(-3, new int[]{-2});
    rules[3] = new Rule(-2, new int[]{-2,10,-2});
    rules[4] = new Rule(-2, new int[]{6,-1,7,-2,8});
    rules[5] = new Rule(-2, new int[]{4,9,-1});
    rules[6] = new Rule(-1, new int[]{3});
    rules[7] = new Rule(-1, new int[]{4});
    rules[8] = new Rule(-1, new int[]{5,-1});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // input -> program
{ this.root = ValueStack[ValueStack.Depth-1].program; }
        break;
      case 3: // program -> program, SEMICOLON, program
{ CurrentSemanticValue.program = new SequenceNode(ValueStack[ValueStack.Depth-3].program, ValueStack[ValueStack.Depth-1].program); }
        break;
      case 4: // program -> FOR, expression, TIMES_DO, program, END
{ CurrentSemanticValue.program = new ForNode(ValueStack[ValueStack.Depth-4].expression, ValueStack[ValueStack.Depth-2].program); }
        break;
      case 5: // program -> VAR, ASSIGN, expression
{ CurrentSemanticValue.program = new AssignNode(ValueStack[ValueStack.Depth-3].variable, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 6: // expression -> ZERO
{ CurrentSemanticValue.expression = new ZeroNode(); }
        break;
      case 7: // expression -> VAR
{ CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].variable; }
        break;
      case 8: // expression -> SUC, expression
{ CurrentSemanticValue.expression = new SucNode(ValueStack[ValueStack.Depth-1].expression); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
